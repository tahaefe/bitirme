# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'v1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


#Temel Kütüphanler
import numpy as np
import pandas as pd

# İstatistik ve Makine Öğrenmesi Kütüphanesi
#import statsmodels.api as sm
#import statsmodels.formula.api as smf
from sklearn.preprocessing import scale
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.metrics import roc_auc_score,roc_curve
#import statsmodels.formula.api as smf
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier





from warnings import filterwarnings
filterwarnings('ignore')

from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import*
from PyQt5.QtCore import*

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(640, 480)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.OpenFileBT = QtWidgets.QPushButton(self.centralwidget)
        self.OpenFileBT.setObjectName("OpenFileBT")
        self.horizontalLayout.addWidget(self.OpenFileBT)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(100)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setMinimumSize(QtCore.QSize(150, 100))
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.checkBox_3 = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_3.setObjectName("checkBox_3")
        self.verticalLayout_3.addWidget(self.checkBox_3)
        self.checkBox = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox.setObjectName("checkBox")
        self.verticalLayout_3.addWidget(self.checkBox)
        self.checkBox_2 = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_2.setObjectName("checkBox_2")
        self.verticalLayout_3.addWidget(self.checkBox_2)
        self.verticalLayout_2.addWidget(self.groupBox, 0, QtCore.Qt.AlignLeft)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setObjectName("listView")
        self.verticalLayout.addWidget(self.listView)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.OpenFileBT.clicked.connect(self.open_file)
        self.pushButton.clicked.connect(self.calistir_btn)





        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.OpenFileBT.setText(_translate("MainWindow", "Choose Dataset"))
        self.label_2.setText(_translate("MainWindow", "Choose Algorithm"))
        self.groupBox.setTitle(_translate("MainWindow", "Algortihm"))
        self.checkBox_3.setText(_translate("MainWindow", "Support Vector Machine"))
        self.checkBox.setText(_translate("MainWindow", "Lineer Regresion"))
        self.checkBox_2.setText(_translate("MainWindow", "KNN"))
        self.label.setText(_translate("MainWindow", "Attributes"))
        self.pushButton.setText(_translate("MainWindow", "Çalıştır"))



    def calistir_btn(self):
        df = self.df.dropna() # Kayıp verilerin temizlenmesi
        y = df["stroke"] #Bağımlı Değer
        X = df.drop(["stroke"], axis=1) #Bağımsız değer

        X['smoking_status'] = X['smoking_status'].replace({'formerly smoked' or 'smokes':'smoked','never smoked' or 'Unknown':'non_smoking'})
#4 durumdan 2 duruma düşürüldü
        X['smoking_status'] = [1 if i.strip() == 'smoked' else 0 for i in X.smoking_status]
        X['gender'] = [1 if i.strip() == 'Male' else 0 for i in X.gender]
        X['ever_married'] = [1 if i.strip() == 'Yes' else 0 for i in X.ever_married]
        X['Residence_type'] = [1 if i.strip() == 'Urban' else 0 for i in X.Residence_type]
        X = X.drop(["work_type"], axis=1)
        X = X.drop(["id"], axis=1)

        X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    test_size = 0.2,
                                                    random_state = 42)
        knn = KNeighborsClassifier()
        knn_model = knn.fit(X_train, y_train)

        y_pred = knn_model.predict(X_test)

        testscore_knn =accuracy_score(y_test, y_pred)
        print(accuracy_score(y_test, y_pred))

    def open_file(self):
    	filename = QFileDialog.getOpenFileName()
    	self.lineEdit.setText(str(filename[0]))
    	self.dataset = pd.read_csv(filename[0])
    	self.dataset.head()
    	self.df = self.dataset.copy()
    	print(filename)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
