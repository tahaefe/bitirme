# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'v1.1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# Temel Kütüphanler
import numpy as np
import pandas as pd

# İstatistik ve Makine Öğrenmesi Kütüphanesi
# import statsmodels.api as sm
# import statsmodels.formula.api as smf
from sklearn.preprocessing import scale
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.metrics import roc_auc_score, roc_curve
# import statsmodels.formula.api as smf
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier


# Veri Görselleştirme Kütüphaneleri
import seaborn as sns

import plotly.graph_objs as go
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import (NavigationToolbar2QT as NavigationToolbar)
import random

from warnings import filterwarnings

filterwarnings('ignore')

from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from mplwidget import MplWidget

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(692, 710)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.OpenFileBT = QtWidgets.QPushButton(self.centralwidget)
        self.OpenFileBT.setObjectName("OpenFileBT")
        self.horizontalLayout.addWidget(self.OpenFileBT)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.MplWidget = MplWidget(self.centralwidget)
        self.MplWidget.setMinimumSize(QtCore.QSize(150, 200))
        self.MplWidget.setObjectName("MplWidget")
        self.verticalLayout_2.addWidget(self.MplWidget)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(100)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setMinimumSize(QtCore.QSize(100, 100))
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.checkBox_3 = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_3.setObjectName("checkBox_3")
        self.verticalLayout_3.addWidget(self.checkBox_3)
        self.checkBox = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox.setObjectName("checkBox")
        self.verticalLayout_3.addWidget(self.checkBox)
        self.checkBox_2 = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_2.setObjectName("checkBox_2")
        self.verticalLayout_3.addWidget(self.checkBox_2)
        self.verticalLayout_2.addWidget(self.groupBox)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.attr_listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.attr_listWidget.setObjectName("attr_listWidget")
        self.verticalLayout.addWidget(self.attr_listWidget)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.groupBox.raise_()
        self.label_2.raise_()
        self.MplWidget.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 692, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.OpenFileBT.clicked.connect(self.open_file)
        self.pushButton.clicked.connect(self.update_graph)
        #Binding the QListWidget created in the Qt Designer
        self.attr_listWidget.clicked.connect(self.getListItem)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.OpenFileBT.setText(_translate("MainWindow", "Choose Dataset"))
        self.label_2.setText(_translate("MainWindow", "Choose Algorithm"))
        self.groupBox.setTitle(_translate("MainWindow", "Algortihm"))
        self.checkBox_3.setText(_translate("MainWindow", "Yapay Sinir Ağları (ANN)"))
        self.checkBox.setText(_translate("MainWindow", "KNN"))
        self.checkBox_2.setText(_translate("MainWindow", "Support Vector Machine"))
        self.label.setText(_translate("MainWindow", "Attributes"))
        self.pushButton.setText(_translate("MainWindow", "Çalıştır"))

    def open_file(self):
        filename = QFileDialog.getOpenFileName()
        self.lineEdit.setText(str(filename[0]))
        self.dataset = pd.read_csv(filename[0])
        self.dataset.head()
        self.df = self.dataset.copy()
        print(self.df.head())
        satir = list(self.df.columns)
        self.attr_listWidget.addItems(satir)
        print("***************************")
        corr_data = self.df.corr() # Datadaki korelasyon ilişkisini kontrol eder.
        sns.clustermap(corr_data,annot= True,fmt = '.2f')
        plt.savefig('graph.png')
        # Bir kümeleme haritası ile bu ilişkiyi görselleştirir.

        plt.title('Korelasyon İlişkisi')
        plt.show()
        print(satir)
        print(filename)


    def update_graph(self):

        fs = 500
        f = random.randint(1, 100)
        ts = 1/fs
        length_of_signal = 100
        t = np.linspace(0,1,length_of_signal)

        cosinus_signal = np.cos(2*np.pi*f*t)
        sinus_signal = np.sin(2*np.pi*f*t)

        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.plot(t, cosinus_signal)
        self.MplWidget.canvas.axes.plot(t, sinus_signal)
        self.MplWidget.canvas.axes.legend(('cosinus', 'sinus'),loc='upper right')
        self.MplWidget.canvas.axes.set_title('Cosinus - Sinus Signal')
        self.MplWidget.canvas.draw()

        df = self.df.dropna() # Kayıp verilerin temizlenmesi
        y = df["stroke"] #Bağımlı Değer
        X = df.drop(["stroke"], axis=1) #Bağımsız değer

        X['smoking_status'] = X['smoking_status'].replace({'formerly smoked' or 'smokes':'smoked','never smoked' or 'Unknown':'non_smoking'})
#4 durumdan 2 duruma düşürüldü
        X['smoking_status'] = [1 if i.strip() == 'smoked' else 0 for i in X.smoking_status]
        X['gender'] = [1 if i.strip() == 'Male' else 0 for i in X.gender]
        X['ever_married'] = [1 if i.strip() == 'Yes' else 0 for i in X.ever_married]
        X['Residence_type'] = [1 if i.strip() == 'Urban' else 0 for i in X.Residence_type]
        X = X.drop(["work_type"], axis=1)
        X = X.drop(["id"], axis=1)

        X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    test_size = 0.2,
                                                    random_state = 42)

        if self.checkBox.isChecked() == True:

            self.checkBox_2.setChecked(False)
            self.checkBox_3.setChecked(False)

            knn = KNeighborsClassifier()
            knn_model = knn.fit(X_train, y_train)

            y_pred = knn_model.predict(X_test)

            testscore_knn = accuracy_score(y_test, y_pred)
            print(accuracy_score(y_test, y_pred))

        elif self.checkBox_2.isChecked() == True:

            self.checkBox_3.Checked(False)
            self.checkBox.setChecked(False)
            svm_model = SVC(kernel = "linear").fit(X_train, y_train)
            y_pred = svm_model.predict(X_test)

            testscore_svm = accuracy_score(y_test, y_pred)
            accuracy_score(y_test, y_pred) #test acc

        elif self.checkBox_3.isChecked() == True:

            self.checkBox_2.setChecked(False)
            self.checkBox.setChecked(False)

            scaler = StandardScaler()

            scaler.fit(X_train)
            X_train_scaled = scaler.transform(X_train)
            X_test_scaled = scaler.transform(X_test)


            mlpc = MLPClassifier().fit(X_train_scaled, y_train)

            y_pred = mlpc.predict(X_test_scaled)

            testscore_mlpc = accuracy_score(y_test, y_pred)
            accuracy_score(y_test, y_pred)

        else:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('You didnt choose algorithm!')

    def getListItem(self):
       #prints the selected item
       print(self.attr_listWidget.currentItem().text())

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
