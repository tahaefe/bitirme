# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'v4.lradio.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# Temel Kütüphanler
import numpy as np
import pandas as pd

# İstatistik ve Makine Öğrenmesi Kütüphanesi
# import statsmodels.api as sm
# import statsmodels.formula.api as smf
from sklearn.preprocessing import scale
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.metrics import roc_auc_score, roc_curve
# import statsmodels.formula.api as smf
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier

# Veri Görselleştirme Kütüphaneleri
import seaborn as sns

import plotly.graph_objs as go
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import (NavigationToolbar2QT as NavigationToolbar)
import random

from warnings import filterwarnings

filterwarnings('ignore')

from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from mplwidget import MplWidget
from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(705, 689)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setMinimumSize(QtCore.QSize(150, 300))
        self.label_3.setMaximumSize(QtCore.QSize(16777215, 800))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("../../PycharmProjects/pYqt5_p1/dota.png"))
        self.label_3.setScaledContents(True)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setWordWrap(False)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_4.addWidget(self.label_3)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.OpenFileBT = QtWidgets.QPushButton(self.centralwidget)
        self.OpenFileBT.setObjectName("OpenFileBT")
        self.horizontalLayout.addWidget(self.OpenFileBT)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(100)
        sizePolicy.setHeightForWidth(self.groupBox_2.sizePolicy().hasHeightForWidth())
        self.groupBox_2.setSizePolicy(sizePolicy)
        self.groupBox_2.setMinimumSize(QtCore.QSize(0, 0))
        self.groupBox_2.setObjectName("groupBox_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.groupBox_2)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.attr_listWidget = QtWidgets.QListWidget(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(100)
        sizePolicy.setHeightForWidth(self.attr_listWidget.sizePolicy().hasHeightForWidth())
        self.attr_listWidget.setSizePolicy(sizePolicy)
        self.attr_listWidget.setMinimumSize(QtCore.QSize(300, 100))
        self.attr_listWidget.setMaximumSize(QtCore.QSize(720, 720))
        self.attr_listWidget.setObjectName("attr_listWidget")
        self.horizontalLayout_4.addWidget(self.attr_listWidget)
        self.groupBox = QtWidgets.QGroupBox(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(100)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setMinimumSize(QtCore.QSize(100, 100))
        self.groupBox.setMaximumSize(QtCore.QSize(720, 720))
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.radioButton = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton.setObjectName("radioButton")
        self.verticalLayout_3.addWidget(self.radioButton)
        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_2.setObjectName("radioButton_2")
        self.verticalLayout_3.addWidget(self.radioButton_2)
        self.radioButton_3 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_3.setObjectName("radioButton_3")
        self.verticalLayout_3.addWidget(self.radioButton_3)
        self.horizontalLayout_4.addWidget(self.groupBox)
        self.verticalLayout_2.addWidget(self.groupBox_2)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, -166, 669, 300))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollAreaWidgetContents.sizePolicy().hasHeightForWidth())
        self.scrollAreaWidgetContents.setSizePolicy(sizePolicy)
        self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(200, 300))
        self.scrollAreaWidgetContents.setMaximumSize(QtCore.QSize(720, 720))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_2 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_2.setMinimumSize(QtCore.QSize(100, 100))
        self.label_2.setObjectName("label_2")
        self.verticalLayout_5.addWidget(self.label_2)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_2.addWidget(self.scrollArea)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_2.addWidget(self.pushButton)
        self.verticalLayout_4.addLayout(self.verticalLayout_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 705, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.secilendeger = None
        MainWindow.setStatusBar(self.statusbar)
        self.statusbar.showMessage("READY!")

        self.OpenFileBT.clicked.connect(self.open_file)
        self.pushButton.clicked.connect(self.update_graph)
        # Binding the QListWidget created in the Qt Designer
        self.attr_listWidget.clicked.connect(self.getListItem)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.OpenFileBT.setText(_translate("MainWindow", "Choose Dataset"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Attributes"))
        self.groupBox.setTitle(_translate("MainWindow", "Algortihm"))
        self.radioButton.setText(_translate("MainWindow", "KNN"))
        self.radioButton_2.setText(_translate("MainWindow", "SVM"))
        self.radioButton_3.setText(_translate("MainWindow", "ANN"))
        self.label_2.setText(_translate("MainWindow", "scaasdfa"))
        self.pushButton.setText(_translate("MainWindow", "Çalıştır"))

    def open_file(self):
        filename = QFileDialog.getOpenFileName()
        self.lineEdit.setText(str(filename[0]))
        self.dataset = pd.read_csv(filename[0])
        self.dataset.head()
        self.df = self.dataset.copy()
        print(self.df.head())
        satir = list(self.df.columns)
        self.attr_listWidget.addItems(satir)
        print("***************************")
        corr_data = self.df.corr()  # Datadaki korelasyon ilişkisini kontrol eder.
        sns.clustermap(corr_data, annot=True, fmt='.2f')
        plt.savefig('graph.png')
        # Bir kümeleme haritası ile bu ilişkiyi görselleştirir.
        self.label_3.setPixmap(QtGui.QPixmap("../../PycharmProjects/pYqt5_p1/graph.png"))
        # plt.title('Korelasyon İlişkisi')
        # plt.show()
        print(satir)
        print(filename)

    def update_graph(self):

        self.statusbar.showMessage("Training!")
        df = self.df.dropna()  # Kayıp verilerin temizlenmesi
        print(f'str {self.secilendeger}')
        y = df[str(self.secilendeger)]  # Bağımlı Değer
        X = df.drop([str(self.secilendeger)], axis=1)  # Bağımsız değer

        X['smoking_status'] = X['smoking_status'].replace(
            {'formerly smoked' or 'smokes': 'smoked', 'never smoked' or 'Unknown': 'non_smoking'})
        # 4 durumdan 2 duruma düşürüldü
        X['smoking_status'] = [1 if i.strip() == 'smoked' else 0 for i in X.smoking_status]
        X['gender'] = [1 if i.strip() == 'Male' else 0 for i in X.gender]
        X['ever_married'] = [1 if i.strip() == 'Yes' else 0 for i in X.ever_married]
        X['Residence_type'] = [1 if i.strip() == 'Urban' else 0 for i in X.Residence_type]
        X = X.drop(["work_type"], axis=1)
        X = X.drop(["id"], axis=1)

        X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                            test_size=0.2,
                                                            random_state=42)

        if self.radioButton_3.isChecked():

            scaler = StandardScaler()

            scaler.fit(X_train)
            X_train_scaled = scaler.transform(X_train)
            X_test_scaled = scaler.transform(X_test)

            mlpc = MLPClassifier().fit(X_train_scaled, y_train)

            y_pred = mlpc.predict(X_test_scaled)

            testscore_mlpc = accuracy_score(y_test, y_pred)
            mlpc_acc = accuracy_score(y_test, y_pred)
            print(f'MLPC Acc : {mlpc_acc}')
            self.label_2.setText(str(f'MLPC Acc : {mlpc_acc}'))

        elif self.radioButton.isChecked():

            knn = KNeighborsClassifier()
            knn_model = knn.fit(X_train, y_train)

            y_pred = knn_model.predict(X_test)

            testscore_knn = accuracy_score(y_test, y_pred)
            print(accuracy_score(y_test, y_pred))
            self.label_2.setText(str(accuracy_score(y_test, y_pred)))
        elif self.radioButton_2.isChecked():
            self.statusbar.showMessage("Starting to Training!")
            svm_model = SVC(kernel="linear").fit(X_train, y_train)
            y_pred = svm_model.predict(X_test)
            self.statusbar.showMessage("Calculating Test Accuracy!")
            testscore_svm = accuracy_score(y_test, y_pred)
            svm_acc = accuracy_score(y_test, y_pred)  # test acc
            print(f'SVC Acc : {svm_acc}')
            self.label_2.setText(str(f'SVC Acc : {svm_acc}'))
            self.statusbar.showMessage("It's Done!")
        else:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('You didnt choose algorithm!')

    def getListItem(self):
        # prints the selected item
        print(self.attr_listWidget.currentItem().text())
        self.secilendeger = self.attr_listWidget.currentItem().text()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
